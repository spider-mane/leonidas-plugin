<?php

define('ROOT_DIR', dirname(__DIR__, 1));
define('PREFILL_DIR', ROOT_DIR . '/.prefill');

// uncomment for debugging
// ini_set('xdebug.var_display_max_depth', 10);
// ini_set('xdebug.var_display_max_children', 256);
// ini_set('xdebug.var_display_max_data', 1024);

################################################################################
# Config
################################################################################

$root = ROOT_DIR;
$prefill = PREFILL_DIR;

$userName = trim(shell_exec('git config user.name'));
$userEmail = trim(shell_exec('git config user.email'));
$packageName = strtolower(basename($root));
$pluginName = ucwords(str_replace(['-', '_'], ' ', $packageName));

// populate for faster testing
$authorGithub = '';
$pluginPrefix = '';
$pluginDescription = '';
$psr4Namespace = '';

$fields = [
  'author_name' => ['Your name', '', $userName],
  'author_email' => ['Your email address', '', $userEmail],
  'author_github_username' => ['Your Github username', '<username> in https://github.com/username', $authorGithub],
  'author_website' => ['Your website', '', 'https://github.com/{author_github_username}'],

  'vendor_name' => ['Vendor name', '', '{author_github_username}'],
  'vendor_github' => ['Vendor Github username', '<username> in https://github.com/username', '{vendor_name}'],
  'vendor_website' => ['Vendor website', '', 'https://github.com/{vendor_name}'],

  'plugin_name' => ['Plugin name', '', $pluginName],
  'package_name' => ['Package name', 'Package or repository name of plugin', $packageName],
  'plugin_prefix' => ['Plugin prefix', 'Abbreviated shorthand ideally 3-5 characters', $pluginPrefix],
  'plugin_version' => ['Plugin version', '', '0.1.0'],
  'plugin_website' => ['Plugin website', '', 'https://github.com/{vendor_github}/{package_name}'],
  'plugin_description' => ['Brief description of plugin', '', $pluginDescription],

  'psr4_namespace' => ['PSR-4 namespace', 'Vendor\\Plugin', $psr4Namespace],
];

$replacements = [
  // code
  ':vendor_name\\\\:plugin_name\\\\' => function ($values) {
    return str_replace('\\', '\\\\', $values['psr4_namespace']) . '\\\\';
  },
  'PseudoVendor\\\\PseudoPlugin\\\\' => function ($values) {
    return str_replace('\\', '\\\\', $values['psr4_namespace']) . '\\\\';
  },
  'PseudoVendor\\PseudoPlugin' => function ($values) {
    return $values['psr4_namespace'];
  },
  'PseudoPlugin' => function ($values) {
    return str_replace(['-', '_'], '', str_replace(['_', '-', ' '], '', ucwords($values['plugin_name'])));
  },
  'PseudoVersion' => function ($values) {
    return str_replace('.', '_', $values['plugin_version']);
  },
  'PSEUDO_CONSTANT' => function ($values) {
    return str_replace('-', '_', strtoupper($values['package_name']));
  },

  // data
  ':plugin_name' => function ($values) {
    return $values['plugin_name'];
  },
  'Pseudo Plugin' => function ($values) {
    return $values['plugin_name'];
  },
  ':package_name' => function ($values) {
    return $values['package_name'];
  },
  'pseudo-package' => function ($values) {
    return $values['package_name'];
  },
  ':plugin_prefix' => function ($values) {
    return $values['plugin_prefix'];
  },
  ':plugin_version' => function ($values) {
    return $values['plugin_version'];
  },
  ':plugin_website' => function ($values) {
    return $values['plugin_website'];
  },
  ':plugin_description' => function ($values) {
    return $values['plugin_description'];
  },
  ':plugin_author' => function ($values) {
    return $values['author_name'];
  },
  ':author_username' => function ($values) {
    return $values['author_github_username'];
  },
  ':author_website' => function ($values) {
    return $values['author_website'];
  },
  ':author_email' => function ($values) {
    return $values['author_email'];
  },
  ':vendor_name' => function ($values) {
    return $values['vendor_name'];
  },
  ':vendor_github' => function ($values) {
    return $values['vendor_github'];
  },
  ':system_year' => function () {
    return date('Y');
  }
];

$files = array_merge(
  // misc boilerplate
  glob($prefill . '/*.md'),
  glob($prefill . '/*.xml.dist'),
  glob($prefill . '/composer.json'),
  glob($prefill . '/package.json'),
  [
    $root . '/phpcs.xml.dist',
  ],

  // php boilerplate
  glob($root . '/boot/*.php'),
  glob($root . '/config/*.php'),
  glob($root . '/src/*.php'),
  glob($root . '/src/**/*.php'),
  glob($root . '/src/**/**/*.php'),
  glob($root . '/tests/*.php'),
  glob($root . '/tests/**/*.php'),
  glob($root . '/tests/**/**/*.php'),
  [
    $root . '/plugin.php',
  ]

  // js boilerplate

  // css boilerplate
);

// files whose output target is not in the root directory
$locate = [
  'package.json' => '/assets'
];

// json files whose contents should be merged with an existing counterpart
$mergeJsonData = [
  'composer.json' => function (array $old, array $new): array {
    $composer = array_replace_recursive($old, $new);
    $composer['authors'] = $new['authors'];
    $composer['keywords'] = $new['keywords'];
    $composer['autoload']['psr-4'] = $new['autoload']['psr-4'];

    unset(
      $composer['scripts']['fill'],
      $composer['scripts']['post-create-project-cmd']
    );

    return $composer;
  },
  'package.json' => function (array $old, array $new): array {
    $package = array_replace_recursive($old, $new);

    return $package;
  }
];

// files to rename
$rename = [
  'src/Activation/vPseudoVersion.php' => function ($values) use ($replacements) {
    return 'v' . ($replacements['PseudoVersion'])($values) . '.php';
  }
];

// files to delete
$delete = [];

################################################################################
# Process
################################################################################

define('COL_DESCRIPTION', 0);
define('COL_HELP', 1);
define('COL_DEFAULT', 2);

$root = ROOT_DIR;
$prefill = PREFILL_DIR;

$modify = 'n';
do {
  if ($modify == 'q') {
    exit;
  }

  $values = [];

  echo "----------------------------------------------------------------------\n";
  echo "Please provide the following information:\n";
  echo "----------------------------------------------------------------------\n";
  foreach ($fields as $key => $field) {
    $default = isset($field[COL_DEFAULT]) ? interpolate($field[COL_DEFAULT], $values) : '';
    $prompt = sprintf(
      '%s%s%s: ',
      $field[COL_DESCRIPTION],
      $field[COL_HELP] ? ' (' . $field[COL_HELP] . ')' : '',
      $field[COL_DEFAULT] !== '' ? ' [' . $default . ']' : ''
    );
    $values[$key] = read_from_console($prompt);
    if (empty($values[$key])) {
      $values[$key] = $default;
    }
  }
  echo "\n";

  echo "----------------------------------------------------------------------\n";
  echo "Please check that everything is correct:\n";
  echo "----------------------------------------------------------------------\n";
  foreach ($fields as $key => $field) {
    echo $field[COL_DESCRIPTION] . ": $values[$key]\n";
  }
  echo "\n";
} while (($modify = strtolower(read_from_console('Modify files with these values? [y/N/q] '))) != 'y');
echo "\n";

// update and relocate boilerplate
foreach ($files as $file) {
  $contents = file_get_contents($file);
  foreach ($replacements as $str => $update) {
    $contents = str_replace($str, $update($values), $contents);
  }

  // resolve absolute path
  $base = basename($file);
  $path = $locate[$base] ?? (str_replace([$prefill, $root, $base], '', $file));
  $file = cleanpath("$root/$path/$base");

  // merge json files
  if (isset($mergeJsonData[$base])) {
    $merged = ($mergeJsonData[$base])(
      json_decode(file_get_contents($file), true),
      json_decode($contents, true)
    );
    $contents = encode_format_json($merged);
  }

  file_put_contents($file, $contents);
}

// rename files
foreach ($rename as $file => $renameFile) {
  $file = realpath("$root/$file");
  rename($file, dirname($file) . '/' . $renameFile($values));
}

// delete files
foreach ($delete as $file) {
  unlink("$root/$file");
}

// delete prefill files
shell_exec('rm ' . __FILE__);
shell_exec("rm -rf $prefill");

// ! refresh git (comment these lines out while testing and debugging)
// shell_exec("cd $root && rm -rf .git && echo git init") . "\n";
// echo shell_exec("git init") . "\n";

echo "All done! Thanks for using Leonidas!\n";

################################################################################
# Functions
################################################################################

function read_from_console($prompt)
{
  if (function_exists('readline')) {
    $line = trim(readline($prompt));
    if (!empty($line)) {
      readline_add_history($line);
    }
  } else {
    echo $prompt;
    $line = trim(fgets(STDIN));
  }
  return $line;
}

function interpolate($text, $values)
{
  if (!preg_match_all('/\{(\w+)\}/', $text, $m)) {
    return $text;
  }
  foreach ($m[0] as $k => $str) {
    $f = $m[1][$k];
    $text = str_replace($str, $values[$f], $text);
  }
  return $text;
}

function encode_format_json(array $json): string
{
  $flags = JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES;
  $json = json_encode($json, $flags);

  return str_replace('    ', '  ', $json) . "\n";
}

function cleanpath(string $path): string
{
  return preg_replace('~/+~', '/', $path);
}
